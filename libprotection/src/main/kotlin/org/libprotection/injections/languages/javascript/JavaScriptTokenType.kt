package org.libprotection.injections.languages.javascript

import org.libprotection.injections.languages.TokenType

enum class JavaScriptTokenType(val value: Int): TokenType {
    RegularExpressionLiteral(1),
    LineTerminator(2),
    OpenBracket(3),
    CloseBracket(4),
    OpenParen(5),
    CloseParen(6),
    OpenBrace(7),
    CloseBrace(8),
    SemiColon(9),
    Comma(10),
    Assign(11),
    QuestionMark(12),
    Colon(13),
    Ellipsis(14),
    Dot(15),
    PlusPlus(16),
    MinusMinus(17),
    Plus(18),
    Minus(19),
    BitNot(20),
    Not(21),
    Multiply(22),
    Divide(23),
    Modulus(24),
    RightShiftArithmetic(25),
    LeftShiftArithmetic(26),
    RightShiftLogical(27),
    LessThan(28),
    MoreThan(29),
    LessThanEquals(30),
    GreaterThanEquals(31),
    Equals_(32),
    NotEquals(33),
    IdentityEquals(34),
    IdentityNotEquals(35),
    BitAnd(36),
    BitXOr(37),
    BitOr(38),
    And(39),
    Or(40),
    MultiplyAssign(41),
    DivideAssign(42),
    ModulusAssign(43),
    PlusAssign(44),
    MinusAssign(45),
    LeftShiftArithmeticAssign(46),
    RightShiftArithmeticAssign(47),
    RightShiftLogicalAssign(48),
    BitAndAssign(49),
    BitXorAssign(50),
    BitOrAssign(51),
    ARROW(52),
    NullLiteral(53),
    BooleanLiteral(54),
    DecimalLiteral(55),
    HexIntegerLiteral(56),
    OctalIntegerLiteral(57),
    OctalIntegerLiteral2(58),
    BinaryIntegerLiteral(59),
    Break(60),
    Do(61),
    Instanceof(62),
    Typeof(63),
    Case(64),
    Else(65),
    New(66),
    Var(67),
    Catch(68),
    Finally(69),
    Return(70),
    Void(71),
    Continue(72),
    For(73),
    Switch(74),
    While(75),
    Debugger(76),
    Function(77),
    This(78),
    With(79),
    Default(80),
    If(81),
    Throw(82),
    Delete(83),
    In(84),
    Try(85),
    Class(86),
    Enum(87),
    Extends(88),
    Super(89),
    Const(90),
    Export(91),
    Import(92),
    Implements(93),
    Let(94),
    Private(95),
    Public(96),
    Interface(97),
    Package(98),
    Protected(99),
    Static(100),
    Yield(101),
    Identifier(102),
    StringLiteral(103),
    TemplateStringLiteral(104),
    WhiteSpaces(105),
    MultiLineComment(106),
    SingleLineComment(107),
    HtmlComment(108),
    CDataComment(109),
    UnexpectedCharacter(110);

    companion object {
        private val map = JavaScriptTokenType.values().associateBy(JavaScriptTokenType::value)
        fun fromInt(type: kotlin.Int) = map[type]!!
    }
}